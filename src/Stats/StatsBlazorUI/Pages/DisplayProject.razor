@using Radzen;
@using StatsInterfaces.UI
@if (project == null) return;
@{
    var url = project.Project.SourceCodeUrl;
    var urlId = url.Replace("https://", "").Replace("http://", "").Replace("/", "_");
    var chartId = $"chart_{urlId}";
    var indexSlash = project.Project.SourceCodeUrl.LastIndexOf("/") ;
    var authorImage = project.Project.SourceCodeUrl.Substring(0,indexSlash)+".png";


}
<h3>
    <a href="@project.Project.SourceCodeUrl" target="_blank">  @project.Project.Name</a>
    <img src="@authorImage" width="30" height="30" />
</h3>
@if (project.LastYear > 0)
{
    <text>
        Stars @project.TotalStars (in @project.LastYear : @project.LastYearStars )
    </text>
}
@if (project != null)
{
        <a href="@project.Project.SourceCodeUrl" target="_blank">@project.Project.SourceCodeUrl</a>
        @project.Project.Description
        <br />
        <RadzenChart  style="height: 400px">
            <RadzenLineSeries Data="@Series" CategoryProperty="Quarter" Title="Stars" LineType="LineType.Solid" ValueProperty="Revenue">
                <RadzenSeriesDataLabels Visible="@false" />
        </RadzenLineSeries>
        </RadzenChart>
}
@code {
    class DataItem{
        public string Quarter{ get; set; }
        public double Revenue { get; set; }
    }

    [Parameter]
    public IProjectWithStars? project { get; set; }

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public string[] XAxisLabels = { };
    
    DataItem[]? Series = [];

    protected override void OnParametersSet()
    {
        var ordered = project!.Stars.OrderBy(p => p.DateRecording).ToArray();        
        Series = ordered.Select(p => new DataItem(){ Quarter= p.DateRecording.Year.ToString(),Revenue =p.Count}) .ToArray();
        StateHasChanged();
    }
}
