@using Radzen;
@if (project == null) return;
@{
    var url = project.Project.SourceCodeUrl;
    var urlId = url.Replace("https://", "").Replace("http://", "").Replace("/", "_");
    var chartId = $"chart_{urlId}";
}
<h3>
    <a href="@project.Project.SourceCodeUrl" target="_blank">  @project.Project.Name</a>

    Stars for @project.LastYear : @project.LastYearStars 
</h3>
@if(project != null){

    <RadzenChart  style="height: 400px">
        <RadzenBarSeries Data="@Series" CategoryProperty="Quarter" Title="2024" LineType="LineType.Dashed" ValueProperty="Revenue">
            <RadzenSeriesDataLabels Visible="@false" />
        </RadzenBarSeries>
        <RadzenBarOptions Radius="5" />
    </RadzenChart>

}
@code {
    class DataItem{
        public string Quarter{ get; set; }
        public double Revenue { get; set; }
    }

    [Parameter]
    public ProjectWithStars_null? project { get; set; }

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public string[] XAxisLabels = { };
    
    DataItem[]? Series = [];

    protected override void OnParametersSet()
    {
        var ordered = project!.Stars.OrderByDescending(p => p.DateRecording).ToArray();        
        Series = ordered.Select(p => new DataItem(){ Quarter= p.DateRecording.Year.ToString(),Revenue =p.Count}) .ToArray();
        StateHasChanged();
    }
}
