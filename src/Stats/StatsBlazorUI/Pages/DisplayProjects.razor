@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.Json
@using StatsInterfaces
@using StatsInterfaces.UI
@{
    int nrProjects = 15;
}


<h2>
    @if(!FinishStreaming)
    {
        <text>Please wait loading @lastYear</text>
    }
</h2>

@if (FinishStreaming)
{

    var oneYearAgo = lastYear - 1;

    var orderedProjectsLastYear = data!
        .Where(it => it.Stars.Any(s=>s.DateRecording.Year == lastYear))
        .Select(it => new { it,it.Project, LastYearStars = it.Stars.FirstOrDefault(s => s.DateRecording.Year == lastYear)?.Count??0 })
        .OrderByDescending(p => p.LastYearStars)
        .ThenBy(p => p.Project.Name)
        .Take(nrProjects)
        .ToArray();


    var dataDisplayLastyear = orderedProjectsLastYear
        .Select(it => new Tuple<IProject, int>(it.it.Project, it.LastYearStars)).ToArray();

    var orderedProjectsAll = data!
        .OrderByDescending(p => p.TotalStars)
        .ThenBy(p => p.Project.Name)
        .Take(nrProjects)
        .ToArray();


    var dataDisplayAll = orderedProjectsAll.Select(it => new Tuple<IProject, int>(it.Project, it.TotalStars)).ToArray();

    var orderedPercentage = data
        .Where(it => it.Stars.Any(s => s.DateRecording.Year == lastYear))
        .Where(it=>it.Stars.Any(s=>s.DateRecording.Year==oneYearAgo))
        .Select(it => 
            new { it, 
                LastYearStars = it.Stars.First(s => s.DateRecording.Year == lastYear), 
                OneYearAgoStars = it.Stars.First(s => s.DateRecording.Year == oneYearAgo) 
            })
        .Select(it => new { it, Percentage = ((double)(it.LastYearStars.Count - it.OneYearAgoStars.Count) * 100) / (double)it.OneYearAgoStars.Count })
        .OrderByDescending(it => it.Percentage)
        .Take(nrProjects)
        .ToArray();

    var dataDisplayPercentage = orderedPercentage.Select(it => new Tuple<IProject, int>(it.it.it.Project, Convert.ToInt32( it.Percentage))).ToArray();

    <p>
        <a href="#MostPopularProjects">Most Stars Projects in @lastYear </a>
    </p>

    <p>
        <a href="#MostRisingProjects">Percentage Increasing Stars Projects in @lastYear</a>
    </p>

    <p>
        <a href="#MostStarsProjectAllTime">Most stars Projects all time</a>
    </p>

    <p>
        <a href="#allProjects">All Projects</a>
    </p>


    <div id="MostPopularProjects"></div>

    <RadzenTabs RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="@("Most Stars Projects in "+lastYear)">

                <DisplayProjectsChart DisplayForChart="@dataDisplayLastyear" />
            </RadzenTabsItem>
            <RadzenTabsItem Text="Details">
                <RadzenAccordion>
                    <Items>
                        @foreach (var prjStars in orderedProjectsLastYear)
                        {
                            string text = $"Project {prjStars.Project.Name} ( click to expand) ";
                            <RadzenAccordionItem Text="@text">
                                <DisplayProject project="@prjStars.it" />
                            </RadzenAccordionItem>
                        }
                    </Items>
                </RadzenAccordion>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>

    <div id="MostRisingProjects"></div>

    <RadzenTabs RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="@("Percentage Increasing Stars Projects in " + lastYear)">

                <DisplayProjectsChart DisplayForChart="@dataDisplayPercentage" />
            </RadzenTabsItem>
            <RadzenTabsItem Text="Details">
                <RadzenAccordion>
                    <Items>
                        @foreach (var prjStars in orderedPercentage)
                        {
                            string text = $"Project {prjStars.it.it.Project.Name}  ( click to expand) ";
                            <RadzenAccordionItem Text="@text">
                                <DisplayProject project="@prjStars.it.it" />
                            </RadzenAccordionItem>
                        }
                    </Items>
                </RadzenAccordion>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>

    <div id="MostStarsProjectAllTime"></div>

    <RadzenTabs RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Most Stars Projects All time">

                <DisplayProjectsChart DisplayForChart="@dataDisplayAll" />
            </RadzenTabsItem>
            <RadzenTabsItem Text="Details">

                <RadzenAccordion>
                    <Items>
                        @foreach (var prjStars in orderedProjectsAll)
                        {
                            string text = $"Project {prjStars.Project.Name}  ( click to expand) ";
                            <RadzenAccordionItem Text="@text">
                                <DisplayProject project="@prjStars" />
                            </RadzenAccordionItem>
                        }
                    </Items>
                </RadzenAccordion>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>

}


@code {

    int nrSetParameters;
    [Parameter]
    public int lastYear { get; set; }
    [Parameter]
    public bool FinishStreaming { get; set; }
    [Parameter]
    public IProjectWithStars[]? data { get; set; }
    [Inject(Key = "statsconsole_host")]
    public HttpClient? httpApi { get; set; }


    protected override void OnParametersSet()
    {
        
        StateHasChanged();
        base.OnParametersSet();
    }


}




