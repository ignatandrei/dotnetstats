@page "/allProjects"
@using Microsoft.AspNetCore.Components.QuickGrid
@using StatsInterfaces.UI
<LoadProjects AfterFinish="AfterFinish" ProjectsLoaded="ProjectsLoaded"></LoadProjects>


<h1>
    @if (!HasFinishedStreaming)
    {
        <text>Please wait</text>
    }
    else
    {
        <text> Number projects: @projects.Length </text>
    }
    @if (data?.Length > 0)
{
    <div id="allProjects"><h3> All projects </h3></div>
    <QuickGrid Items="IndexProjects" >
        <TemplateColumn Sortable="false" Title="Index">
            @(context.index+1)
        </TemplateColumn>
        <PropertyColumn Property="@(p => p.project.Project.Name)" Sortable="true" Title="Name" IsDefaultSortColumn="true" />
        <PropertyColumn Property="@(p => p.project.TotalStars)" Sortable="true" title="Total Stars" />
        <PropertyColumn Property="@(p => p.project.LastYearStars)" Title="Last Year Stars" Sortable="true" />
        <TemplateColumn Title="Details">
            <DisplayProject project="@context.project" />            
        </TemplateColumn>
    </QuickGrid>


    <RadzenAccordion>
        <Items>
            @foreach (var prjStars in data.projectWithStars())
            {
                string text = $"Project {prjStars.Project.Name}  ( click to expand) ";
                <RadzenAccordionItem Text="@text">
                    <DisplayProject project="@prjStars" />
                </RadzenAccordionItem>
            }
        </Items>
    </RadzenAccordion>
}
</h1>

@code {
    int lastYear = DateTime.Now.Year - 1;
    private bool HasFinishedStreaming = false;

    [Inject]
    public AllDataProjectsWithStars? data { get; set; }

    public IProjectWithStars[]? projects = null;

    private void AfterFinish(bool args)
    {
        HasFinishedStreaming = args;
        projects = data!.projectWithStars();
        StateHasChanged();
    }
    private void ProjectsLoaded(int args)
    {
        projects = data!.projectWithStars();
        StateHasChanged();
    }
    public IQueryable<(int index, IProjectWithStars project)> IndexProjects =>
    (data?.projectWithStars() ?? Enumerable.Empty<IProjectWithStars>()).Index().AsQueryable();

}
